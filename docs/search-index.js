var searchIndex = JSON.parse('{\
"confertus":{"doc":"","t":[3,12,0,11,11,0,12,12,11,11,11,0,0,11,11,11,0,0,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,5,5,3,11,11,11,11,11,11,11,11,11,11,11,8,8,16,8,10,10,10,10,10,10,10,10,10,10,10,11,11,10,5,3,11,11,11,11,11,11,11],"n":["Config","algo","avl_tree","borrow","borrow_mut","commands","file_in","file_out","from","into","new","static_vector","traits","try_from","try_into","type_id","utils","vector","AVL","Leaf","Node","borrow","borrow_mut","empty","fmt","from","insert","into","new","new_with_capacity","push","singleton","try_from","try_into","type_id","0","1","left","nums","ones","right","size","insert","read_lines","SBitVec","access","borrow","borrow_mut","fmt","from","index","into","new","try_from","try_into","type_id","DynBitTree","DynBitVec","Intern","StaticBitVec","access","bitclear","bitset","child","delete","deletenode","flip","insert","insertchild","new","parent","rank","select","subtree_size","cast","V","borrow","borrow_mut","from","into","try_from","try_into","type_id"],"q":["confertus","","","","","","","","","","","","","","","","","","confertus::avl_tree","","","","","","","","","","","","","","","","","confertus::avl_tree::AVL","","","","","","","confertus::commands","","confertus::static_vector","","","","","","","","","","","","confertus::traits","","","","","","","","","","","","","","","","","","confertus::utils","confertus::vector","","","","","","",""],"d":["Configuration for command line arguments.","Which algorithm to use. Options are <code>bv</code> and <code>bp</code>","Contains implementation of AVL tree","","","Module for parsing and building cli commands and args","name of file with input commands","name of file to write results to","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new Configuration instance based on arguments passed","Static bit vector implementation: <code>SBitVec</code> used as Leaf for …","Contains traits for <code>StaticBitVec</code>, <code>DynBitVec</code> and <code>DynBitTree</code>","","","","Module providing commonly used utility functions","Dynamic Bit vector implementation for <code>Vec</code>: <code>V</code>","Dynamic Bit Vector implementation with AVL-Tree","Leaf containing value-bitvector and <code>nums</code>, number of used …","left, right, ones, num","","","Create new empty AVL-Tree Leaf","","Returns the argument unchanged.","Inserts bit <code>val</code> at a given position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Create new empty AVL-Tree root","","Inserts bit <code>val</code> at the current last position.","Create AVL-Tree singleton with value <code>bit</code>.","","","","","","left side Node","number of ‘filled’ bits on the left  subtree","number of ones on the left subtree","right side Node","total number of filled bits … (unused currently)","","Read large files line by line in Rust Efficient (cache) …","","","","","","Returns the argument unchanged.","Return immutable reference to boolean value of position …","Calls <code>U::from(self)</code>.","","","","","","","","","<code>access i</code> return bit value at position i","<code>bitclear i</code> sets <code>i</code>-th bit to 0 updates <code>ones</code> and <code>num</code> …","<code>bitset  i</code> sets <code>i</code>-th bit to 1 updates <code>ones</code> and <code>num</code> …","<code>child v i</code> write i-th child of v to output file","<code>delete i</code> delete the i-th bit concurrently updates all …","<code>deletenode v</code> delete node v","<code>flip i</code> flip the i-th bit updates <code>ones</code> and <code>num</code> accordingly","<code>insert i [0|1]</code> insert a 0 or 1 at the i-th position of the …","<code>insertchild v i k</code> insert new <code>i</code>-th child of node <code>v</code> such …","Constructor","<code>parent v</code> write parent of v to output file","<code>rank [0|1] i</code> return rank0 or rank1 up to position i …","<code>select [0|1] i</code> return select0 or select1 for the i-th …","<code>subtree size v</code> write subtree size of v (including v) to …","A number of utility functions, for casting etc","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,0,0,0,5,5,5,5,5,5,5,5,5,5,5,0,0,6,0,6,7,7,8,7,8,7,7,8,6,8,6,6,8,0,0,9,9,9,9,9,9,9],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[]],[[]],[[],["result",4,[["config",3],["str",0]]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["usize",0],["bool",0]]],[[]],[[]],[[["usize",0]]],[[["",0],["bool",0]]],[[["bool",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["avl",4],["vec",3,[["str",0]]]],["avl",4]],[[],["result",6,[["lines",3,[["bufreader",3,[["file",3]]]]]]]],null,[[["usize",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["usize",0]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["usize",0]],["bool",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0],["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0],["bool",0]]],[[["usize",0],["usize",0],["bool",0]]],[[]],[[["usize",0]]],[[["",0],["bool",0],["usize",0]],["usize",0]],[[["",0],["bool",0],["usize",0]],["usize",0]],[[["usize",0]]],[[["isize",0]],["usize",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Config"],[4,"AVL"],[13,"Leaf"],[13,"Node"],[3,"SBitVec"],[8,"StaticBitVec"],[8,"DynBitVec"],[8,"DynBitTree"],[3,"V"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};