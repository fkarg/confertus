var searchIndex = JSON.parse('{\
"confertus":{"doc":"","t":[0,0,0,0,0,0,0,0,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,3,12,11,11,12,12,11,11,11,11,11,11,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,12,12,11,11,12,12,12,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,8,8,8,16,8,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,3,11,11,11,11,11,11,11],"n":["avl_tree","commands","config","dynamic_vector","static_vector","traits","utils","vector","AVL","Leaf","Node","borrow","borrow_mut","capacity","clone","clone_into","create","default","empty","eq","fmt","from","insert","into","is_empty","len","ne","new","nums","ones","push","singleton","to_owned","try_from","try_into","type_id","0","1","2","left","nums","ones","parent","right","size","delete","flip","insert","rank","read_lines","select","wait_continue","write_file","Config","algo","borrow","borrow_mut","file_in","file_out","from","into","new","try_from","try_into","type_id","DynamicBitVector","Leaf","LeafValue","Node","access","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","delete","delete","dotviz","dotviz","dotviz","eq","eq","eq","flip","fmt","fmt","fmt","fmt","from","from","from","get","index","index","index_mut","index_mut","insert","insert","insert_unchecked","into","into","into","leafs","left","ne","ne","ne","new","new","new","nodes","nums","nums","nums","nums","ones","ones","ones","parent","parent","push","push","push_unchecked","rank","rank","rank","rebalance","replace_child_with","retrace","right","root","rotate_left","rotate_right","select","select","size","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","SBitVec","access","borrow","borrow_mut","fmt","from","index","into","new","try_from","try_into","type_id","Dot","DynBitTree","DynBitVec","Intern","StaticBitVec","access","bitclear","bitset","child","delete","deletenode","dotviz","flip","insert","insertchild","new","parent","rank","select","subtree_size","V","borrow","borrow_mut","from","into","try_from","try_into","type_id"],"q":["confertus","","","","","","","","confertus::avl_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","confertus::avl_tree::AVL","","","","","","","","","confertus::commands","","","","","","","","confertus::config","","","","","","","","","","","","confertus::dynamic_vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","confertus::static_vector","","","","","","","","","","","","confertus::traits","","","","","","","","","","","","","","","","","","","","confertus::vector","","","","","","",""],"d":["First implementation approach using AVL trees","Module for parsing and building cli commands and args","Configuration for command line arguments","Actual implementation of dynamic bit vector with AVL Tree","Static bit vector implementation: <code>SBitVec</code> used as Leaf for …","Contains traits for <code>StaticBitVec</code>, <code>DynBitVec</code> and <code>DynBitTree</code>","Module providing commonly used utility functions","Dynamic Bit vector implementation for <code>Vec</code>: <code>V</code>","AVL-Tree for Dynamic Bit Vector implementation","Leaf 0: bitvector containing values 1: <code>nums</code>, number of …","Node which might contain a right and left subtree, and …","","","Return currently available capacity across all subtrees","","","shorthand function for creating an <code>AVL::Node</code>","","Create new empty AVL-Tree Leaf","","","Returns the argument unchanged.","Inserts bit <code>val</code> at a given position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","","Length of total bits currently held","","Create new empty AVL-Tree root","Returns number of bits used in left subtree or current …","Returns number of 1-bits in left subtree or current …","Inserts bit <code>val</code> at the current last position.","Create AVL-Tree singleton with value <code>bit</code>.","","","","","","","","left side Node","number of ‘filled’ bits on the left  subtree","number of ones on the left subtree","reference to parent Node","right side Node","total number of filled bits … (unused currently)","","","","","Read large files line by line in Rust Efficient (cache) …","","","","Configuration for command line arguments.","Which algorithm to use. Options are <code>bv</code> and <code>bp</code>","","","name of file with input commands","name of file to write results to","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new Configuration instance based on arguments passed","","","","Implementation of Dynamic Bit Vector using AVL/RB tree.","Leaf element of <code>crate::DynamicBitVector</code>. Next to its value …","Primitive type used as bit container in <code>Leaf</code>. Probably <code>u64</code> …","Node element of <code>super::DynamicBitVector</code>. Contains …","Access bit value at position <code>index</code>","","","","","","","","","","","","","","","","","","Remove bit value at position <code>index</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return value at position <code>index</code> of <code>DynamicBitVector</code>.","","","","","","Insert <code>bit</code> at position <code>index</code> in <code>Leaf</code>.","Unchecked version of <code>Leaf::insert</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Vector containing <code>Leaf</code>","left side subtree where <code>isize</code> is the index to child element","","","","Constructs new <code>DynamicBitVector</code> with empty root <code>Node</code>.","","","Vector containing <code>Node</code>","","","number of bits used in <code>value</code>-container. Below …","number of ‘filled’ bits on the left  subtree","","Returns number on-bits in <code>self.values</code>","number of ones on the left subtree","reference to parent <code>crate::Node</code>","reference to parent Node","Append <code>bit</code> to the rightmost position in the rightmost <code>Leaf</code>.","Appends bit to the end of <code>value</code>, as long as there is free …","Unchecked version of <code>Leaf::push</code>","","","difference of height between left and right subtree","Rebalance tree to reestablish the rank difference …","Used when inserting a Node in place of a <code>super::Leaf</code> or …","retrace rank of parent until root (or cancel, or rebalance)","right side subtree where <code>isize</code> is the index to child …","index to root <code>Node</code>","Left rotation of <code>Node</code>s <code>x</code> and <code>z</code>.","Right rotation of <code>Node</code>s <code>x</code> and <code>z</code>.","","","total bit capacity, across both subtrees","","","","","","","","","","","","","","container for actual bit values","","","","","","Returns the argument unchanged.","Return immutable reference to boolean value of position …","Calls <code>U::from(self)</code>.","","","","","Visualize Tree-based structures with <code>graphviz</code> using the …","","","","","<code>access i</code> return bit value at position i","<code>bitclear i</code> sets <code>i</code>-th bit to 0 updates <code>ones</code> and <code>num</code> …","<code>bitset  i</code> sets <code>i</code>-th bit to 1 updates <code>ones</code> and <code>num</code> …","<code>child v i</code> write i-th child of v to output file","<code>delete i</code> delete the i-th bit concurrently updates all …","<code>deletenode v</code> delete node v","Return <code>dot</code> representation for graph visualization. Read …","<code>flip i</code> flip the i-th bit updates <code>ones</code> and <code>num</code> accordingly","<code>insert i [0|1]</code> insert a 0 or 1 at the i-th position of the …","<code>insertchild v i k</code> insert new <code>i</code>-th child of node <code>v</code> such …","Constructor","<code>parent v</code> write parent of v to output file","<code>rank [0|1] i</code> return rank0 or rank1 up to position i …","<code>select [0|1] i</code> return select0 or select1 for the i-th …","<code>subtree size v</code> write subtree size of v (including v) to …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,5,6,5,7,6,5,7,6,6,5,7,6,5,7,6,5,7,6,5,6,5,7,6,5,7,6,6,6,5,7,6,5,7,6,6,6,6,6,6,5,5,6,5,7,6,7,6,5,7,6,5,7,6,6,5,5,7,6,5,7,5,7,6,5,5,6,5,7,6,7,6,7,6,6,6,6,5,7,6,5,7,6,6,5,7,6,5,7,6,5,7,5,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,9,0,9,10,10,11,10,11,12,10,10,11,9,11,9,9,11,0,13,13,13,13,13,13,13],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["usize",0]],[[["",0]],["avl",4]],[[["",0],["",0]]],[[["option",4,[["box",3,[["avl",4]]]]],["option",4,[["box",3,[["avl",4]]]]],["usize",0],["usize",0],["usize",0]]],[[]],[[]],[[["",0],["avl",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["usize",0],["bool",0]]],[[]],[[],["bool",0]],[[],["usize",0]],[[["",0],["avl",4]],["bool",0]],[[]],[[],["usize",0]],[[],["usize",0]],[[["",0],["bool",0]]],[[["bool",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["dynamicbitvector",3],["vec",3,[["str",0]]]],["dynamicbitvector",3]],[[["dynamicbitvector",3],["vec",3,[["str",0]]]],["dynamicbitvector",3]],[[["dynamicbitvector",3],["vec",3,[["str",0]]]],["dynamicbitvector",3]],[[["dynamicbitvector",3],["vec",3,[["str",0]]]],["dynamicbitvector",3]],[[],["result",6,[["lines",3,[["bufreader",3,[["file",3]]]]]]]],[[["dynamicbitvector",3],["vec",3,[["str",0]]]],["dynamicbitvector",3]],[[]],[[["str",0]],["result",6]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[]],[[],["result",4,[["config",3],["str",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0],["usize",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["usize",0]],[[["",0]],["dynamicbitvector",3]],[[["",0]],["leaf",3]],[[["",0]],["node",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["dynamicbitvector",3]],[[],["leaf",3]],[[],["node",3]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["isize",0]],["string",3]],[[["",0],["isize",0]],["string",3]],[[["",0],["isize",0]],["string",3]],[[["",0],["dynamicbitvector",3]],["bool",0]],[[["",0],["leaf",3]],["bool",0]],[[["",0],["node",3]],["bool",0]],[[["",0],["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["usize",0]],["bool",0]],[[["",0],["isize",0]]],[[["",0],["usize",0]]],[[["",0],["isize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0],["bool",0]]],[[["",0],["usize",0],["bool",0]]],[[["",0],["usize",0],["bool",0]]],[[]],[[]],[[]],null,null,[[["",0],["dynamicbitvector",3]],["bool",0]],[[["",0],["leaf",3]],["bool",0]],[[["",0],["node",3]],["bool",0]],[[]],[[["usize",0]]],[[]],null,[[],["usize",0]],[[["",0]],["usize",0]],null,null,[[],["usize",0]],[[["",0]],["usize",0]],null,null,null,[[["",0],["bool",0]]],[[["",0],["bool",0]],["result",4,[["str",0]]]],[[["",0],["bool",0]]],[[["",0],["bool",0],["usize",0]]],[[["",0],["bool",0],["usize",0]],["usize",0]],null,[[["",0],["usize",0],["usize",0]]],[[["",0],["isize",0],["isize",0]]],[[["",0],["usize",0],["i8",0]]],null,null,[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["usize",0]],[[["",0],["bool",0],["usize",0]]],[[["",0],["bool",0],["usize",0]],["usize",0]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["usize",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["usize",0]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["usize",0]],["bool",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0],["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["isize",0]],["string",3]],[[["usize",0]]],[[["usize",0],["bool",0]]],[[["usize",0],["usize",0],["bool",0]]],[[]],[[["usize",0]]],[[["",0],["bool",0],["usize",0]],["usize",0]],[[["",0],["bool",0],["usize",0]],["usize",0]],[[["usize",0]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"AVL"],[13,"Leaf"],[13,"Node"],[3,"Config"],[3,"Leaf"],[3,"DynamicBitVector"],[3,"Node"],[3,"SBitVec"],[8,"StaticBitVec"],[8,"DynBitVec"],[8,"DynBitTree"],[8,"Dot"],[3,"V"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};